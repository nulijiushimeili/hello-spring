<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--&lt;!&ndash; 配置文件路径 &ndash;&gt;-->
    <!--<context-param>-->
        <!--<param-name>contextConfigLocation</param-name>-->
        <!--<param-value>classpath:spring.xml,classpath:spring-mybatis.xml</param-value>-->
    <!--</context-param>-->


    <!--&lt;!&ndash; set character encoding spring &ndash;&gt;-->
    <!--<filter>-->
        <!--<description>字符集过滤器</description>-->
        <!--<filter-name>characterEncodingFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>encoding</param-name>-->
            <!--<param-value>UTF-8</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
            <!--<param-name>forceEncoding</param-name>-->
            <!--<param-value>true</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->

    <!--<filter-mapping>-->
        <!--<filter-name>characterEncodingFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--<listener>-->
        <!--<listener-class>-->
            <!--org.springframework.web.context.ContextLoaderListener-->
        <!--</listener-class>-->
    <!--</listener>-->

    <!--<servlet>-->
        <!--<servlet-name>DispatcherServlet</servlet-name>-->
        <!--<servlet-class>-->
            <!--org.springframework.web.servlet.DispatcherServlet-->
        <!--</servlet-class>-->
        <!--<init-param>-->
            <!--<param-name>contextConfigLocation</param-name>-->
            <!--<param-value>classpath:spring-mvc.xml</param-value>-->
        <!--</init-param>-->
        <!--&lt;!&ndash; 使系统在启动时装在servlet而不是第一个servlet被访问 &ndash;&gt;-->
        <!--<load-on-startup>1</load-on-startup>-->
    <!--</servlet>-->

    <!--<servlet-mapping>-->
        <!--&lt;!&ndash;这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.&ndash;&gt;-->
        <!--<servlet-name>DispatcherServlet</servlet-name>-->
        <!--&lt;!&ndash;Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？&ndash;&gt;-->
        <!--&lt;!&ndash;1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。&ndash;&gt;-->
        <!--&lt;!&ndash;2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 &ndash;&gt;-->
        <!--<url-pattern>*.do</url-pattern>-->
    <!--</servlet-mapping>-->

    <!--&lt;!&ndash; 配置session过期时间120分钟 &ndash;&gt;-->
    <!--<session-config>-->
        <!--<session-timeout>120</session-timeout>-->
    <!--</session-config>-->

    <!--<error-page>-->
        <!--<error-code>404</error-code>-->
        <!--<location>/404.jsp</location>-->
    <!--</error-page>-->

    <!--<welcome-file-list>-->
        <!--<welcome-file>index.html</welcome-file>-->
        <!--<welcome-file>index.htm</welcome-file>-->
        <!--<welcome-file>index.jsp</welcome-file>-->
        <!--<welcome-file>default.html</welcome-file>-->
        <!--<welcome-file>default.htm</welcome-file>-->
        <!--<welcome-file>default.jsp</welcome-file>-->
    <!--</welcome-file-list>-->
</web-app>